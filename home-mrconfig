[DEFAULT]
include = cat /usr/local/lib/mr/stow

lib =
  error(){ printf "\033[1m\033[31mERROR: $@\033[m\n"; exit 1; }
  warning(){ printf "\033[1m\033[1;33mWARNING: $@\033[m\n"; }
  info(){ printf "\033[1m\033[33m $@\033[m\n"; }
  hostname="$(hostname)"
  whoami="$(whoami)"
  anon(){
    ( GIT_CONFIG_HOME=/home/anon/.git/config remote.origin.url || \
      cat .git/remotes/origin ) | grep -q 'git://'
  }
  on(){
    for host in "$@"; do
      if [ "${host%@*}" != "${host#*@}" ]; then
        if [ "$whoami" != "${host%@*}" ]; then
          continue
        fi
        host="${host#*@}"
      fi
      if [ "$hostname" = "$host" ]; then
        return 0
      fi
    done
    return 1
  }
  myworkstation() {
    on wandsas@z620
  }
  checkprivs(){
    find "$MR_REPO" -type f -exec chmod 600 {} \;
    find "$MR_REPO" -type d -exec chmod 700 {} \;
    info "Privileges checked for $MR_NAME"
    stat -c "%a %n" $MR_REPO | info "$MR_NAME $(awk '{print $1}')"
  }
  git_ensure_remote() {
	  remote="$1"
	  url="$2"
	  git remote | grep -q "^$remote$" || {
	    echo I: Adding remote $remote $url
	    git remote add "$remote" "$url"
	  }
	  git remote get-url "$remote" | grep -q "^$url$" || {
	    echo I: Changing remote URL for $remote to $url
	    git remote set-url $remote $url
	  }
  }

[$HOME/repos/wandsas/mr-config]
name = mr-config
order = 1
checkout = git clone git@rpi3.lan:wandsas/mr-config.git $MR_REPO
post_checkout =
  cd "$MR_REPO && git remote add gitlab git@gitlab.com:sawander/mr-config.git
# This load repos/wandsas/mr-config/.mrconfig
chain = false
fixups =
  ln -sf "$MR_REPO/home-mrconfig" ~/.mrconfig
  ln -sf "$MR_REPO/.stow-global-ignore" ~

# xbps-install perl-Test-Output texinfo
[$HOME/builds/stow]
checkout = git clone git@rpi3.lan:stow.git
fixups = git_ensure_remote upstream git://git.savannah.gnu.org/stow.git
  cd $MR_REPO
  autoreconf -fi
  ./configure --prefix=/usr/local
  make -j4
  sudo make install

[$HOME/builds/myrepos]
checkout = git clone git@rpi3.lan:myrepos.git
fixups =
  git_ensure_remote upstream git://myrepos.branchable.com/myrepos
  cd $MR_REPO
  sudo make install

[$HOME/repos/wandsas/shell-env]
checkout = git clone git@rpi3.lan:shell-env.git
fixups = git_ensure_remote gitlab git@gitlab.com:sawander/shell-env.git
lib = MR_FOLD=
stowable = true

[$HOME/repos/wandsas/sway-desktop]
checkout = git clone git@rpi3.lan:sway-desktop.git
fixups = git_ensure_remote gitlab git@gitlab.com:sawander/sway-desktop.git
lib = MR_FOLD=
stowable = true

[$HOME/repos/wandsas/xorg-desktop]
checkout = git clone git@rpi3.lan:xorg-desktop.git
fixups = git_ensure_remote gitlab git@gitlab.com:swander/xorg-desktop.git
lib = MR_FOLD=
stowable = true

[$HOME/repos/wandsas/git-config]
checkout = git clone git@rpi3.lan:git-config.git
fixups = git_ensure_remote gitlab git@gitlab.com:sawander/git-config.git
stowable = true

[$HOME/repos/wandsas/vim-config]
checkout = git clone git@rpi3.lan:vim-config.git
fixups = git_ensure_remote gitlab git@gitlab.com:sawander/vim-config.git
stowable = true

[$HOME/repos/wandsas/mail-config]
checkout = git clone git@rpi3.lan:mail-config.git
fixups = git_ensure_remote gitlab git@gitlab.com:sawander/mail-config.git
stowable = true
fixups = checkprivs
skip = ! myworkstation

[$HOME/.ssh]
checkout = git clone git@rpi3.lan:ssh-config.git $MR_REPO
fixups = checkprivs
skip = ! myworkstation

[$HOME/.gnupg]
checkout = git clone git@rpi3.lan:gnupg-config.git $MR_REPO
fixups = checkprivs
skip = ! myworkstation

[$HOME/.password-store]
checkout = git clone git@rpi3.lan:password-store.git $MR_REPO
fixups = checkprivs
skip = ! myworkstation

# vim: fenc=utf-8 ft=dosini ts=2 sts=2 sw=2 et

